[{"path":"https://docs.ropensci.org/gittargets/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Development community effort, welcome participation.","code":""},{"path":"https://docs.ropensci.org/gittargets/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"Please note gittargets project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/gittargets/CONTRIBUTING.html","id":"discussions","dir":"","previous_headings":"","what":"Discussions","title":"Contributing","text":"https://github.com/ropensci/gittargets/discussions, can post general questions, brainstorm ideas, ask help.","code":""},{"path":"https://docs.ropensci.org/gittargets/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"https://github.com/ropensci/gittargets/issues bug reports, performance issues, maintenance tasks, feature requests. post, please abide following guidelines. posting new issue discussion topic, please take moment search existing similar threads order avoid duplication. bug reports: can, please install latest GitHub version gittargets (.e. remotes::install_github(\"ropensci/gittargets\")) verify issue still persists. Describe issue prose clearly concisely possible. Runnable: post enough R code data onlooker can create error computer. Minimal: reduce runtime wherever possible remove complicated details irrelevant issue hand. Readable: format code according tidyverse style guide.","code":""},{"path":"https://docs.ropensci.org/gittargets/CONTRIBUTING.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Contributing","text":"External code contributions extremely helpful right circumstances. recommended steps. Prior contribution, please propose idea discussion topic issue thread maintainer can define intent scope work. Fork repository. Follow GitHub flow create new branch, add commits, open pull request. Discuss code maintainer pull request thread. everything looks good, maintainer merge code project. Please also follow additional guidelines. Respect architecture reasoning package. Depending scope work, may want read design documents (package vignettes). possible, keep contributions small enough easily review manually. okay split work multiple pull requests. Format code according tidyverse style guide check formatting lint_package() function lintr package. new features functionality, add tests tests. Tests can automated go tests/testthat/. Tests automated go tests/interactive/. features affecting performance, good practice add profiling studies tests/performance/. Check code coverage covr::package_coverage(). Automated tests cover new changed functionality pull request. Run overall package checks devtools::check() goodpractice::gp() Describe contribution project’s NEWS.md file. sure mention relevent GitHub issue numbers GitHub name done existing news entries. feel contribution substantial enough official author contributor status, please add Authors@R field DESCRIPTION file.","code":""},{"path":"https://docs.ropensci.org/gittargets/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Eli Lilly Company Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/gittargets/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Prework","title":"Prework","text":"understand agree Contributor Code Conduct. already submitted discussion topic issue discuss idea maintainer.","code":""},{"path":"https://docs.ropensci.org/gittargets/PULL_REQUEST_TEMPLATE.html","id":"related-github-issues-and-pull-requests","dir":"","previous_headings":"","what":"Related GitHub issues and pull requests","title":"Prework","text":"Ref: #","code":""},{"path":"https://docs.ropensci.org/gittargets/PULL_REQUEST_TEMPLATE.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Prework","text":"Please explain purpose scope contribution.","code":""},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Tutorial: Git data backend","text":"Please begin installation instructions documentation website. addition, targets pipeline generates large data files, consider installing Git LFS. Git data backend gittargets automatically opts Git LFS, need manual configuration reap performance benefits.","code":""},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"remotes","dir":"Articles","previous_headings":"","what":"Remotes","title":"Tutorial: Git data backend","text":"backend uses local Git . possible push snapshotted data store cloud service like GitHub, GitLab, Bitbucket, user’s responsibility. Pipelines usually generate large data files, GitHub peers file size limitations. Also, gittargets automatically opts Git LFS locally (unless git_lfs FALSE tar_git_init()), Git LFS cloud paid service.","code":""},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"overall-workflow","dir":"Articles","previous_headings":"","what":"Overall workflow","title":"Tutorial: Git data backend","text":"important steps Git data backend follows. rest vignette walks steps greater depth. Create source code run pipeline least data store exists. tar_git_init(): initialize Git/Git-LFS repository data store. Bring pipeline date (e.g. tar_make()) commit changes source code. tar_git_snapshot(): create data snapshot current code commit. Develop pipeline. Creating new code commits code branches early often, create data snapshots key strategic milestones. tar_git_checkout(): revert data appropriate prior snapshot.","code":""},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"create-code","dir":"Articles","previous_headings":"","what":"Create code","title":"Tutorial: Git data backend","text":"begin development, write _targets.R file targets pipeline. targets can handle large complex pipelines machine learning, Bayesian data analysis, much . However, tutorial focuses much simpler pipeline sake pedagogical simplicity.","code":"# _targets.R library(targets) list(   tar_target(data, datasets::airquality),   tar_target(result, summary(data)) )"},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"run-pipeline","dir":"Articles","previous_headings":"","what":"Run pipeline","title":"Tutorial: Git data backend","text":"target script hand, run pipeline.1 inspect output tar_read().","code":"tar_make() tar_read(result)"},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"commit-code","dir":"Articles","previous_headings":"","what":"Commit code","title":"Tutorial: Git data backend","text":"usually iterate writing code running pipeline decent set results. , commit code Git repository, may may live GitHub.2 Happy Git R great way learn Git, gert package convenient way interact Git R.","code":"library(gert) git_init() git_add(\"_targets.R\") git_commit(\"Begin analyzing the airquality dataset\") git_branch_create(\"airquality\")"},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"snapshot-data","dir":"Articles","previous_headings":"","what":"Snapshot data","title":"Tutorial: Git data backend","text":"snapshot data, check code date Git repository targets date pipeline. tar_git_status() function easy way .3 code pipeline look ready data snapshot. First, initialize data repository tar_git_init(). tar_git_init() writes .gitattributes file data store automatically opts Git LFS. Git LFS wish use , please remove .gitattributes calling tar_git_init(). , create first data commit tar_git_snapshot().4","code":"tar_git_status() tar_git_init() tar_git_snapshot()"},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"snapshot-model","dir":"Articles","previous_headings":"Snapshot data","what":"Snapshot model","title":"Tutorial: Git data backend","text":"Git data backend, data snapshot special kind Git commit (gray boxes ). data commit part data branch (vertical dashed lines ), data branch specific current code commit (green brown boxes ). fact, data branch name form \"code=<SHA1>\", <SHA1> Git SHA1 hash corresponding code commit. can always create data snapshot, supersede prior data snapshot already current code commit. revert previous data snapshots given code snapshot, need manually enter repository check relevant data commit.","code":""},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"repeat","dir":"Articles","previous_headings":"","what":"Repeat","title":"Tutorial: Git data backend","text":"Development typically happens cycles: develop code, run pipeline, commit code, snapshot data, repeat. code commits need data snapshot, especially targets pipeline generates lot data. even , helpful snapshot data key milestones, e.g. alternative research question comes desirable create new Git branch code. example, suppose wish apply pipeline different dataset. code changes: run pipeline inspect new output. put code new Git branch. Finally, create data snapshot new code commit.","code":"# _targets.R library(targets) list(   tar_target(data, datasets::UKgas), # different dataset   tar_target(result, summary(data)) ) tar_make() tar_read(result) git_branch_create(\"UKgas\") git_add(\"_targets.R\") git_commit(\"Switch to UKgas dataset\") tar_git_snapshot()"},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"view-log","dir":"Articles","previous_headings":"","what":"View log","title":"Tutorial: Git data backend","text":"Now, suppose want switch project back original dataset (airquality). transition completely, need revert code data. revert code, data store sill reflect UKgas dataset, none targets date. point, good time pause check gittargets log see code commits available data snapshots.5","code":"tar_git_log()"},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"check-out-code","dir":"Articles","previous_headings":"","what":"Check out code","title":"Tutorial: Git data backend","text":"check old airquality code, use gert::git_branch_checkout(). revert data, results still reflect UKgas dataset. Thus, targets date.","code":"git_branch_checkout(\"airquality\") tar_read(result) tar_outdated()"},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"check-out-data","dir":"Articles","previous_headings":"","what":"Check out data","title":"Tutorial: Git data backend","text":"bring targets back date airquality data, instead beginning potentially long computation tar_make(), can check data snapshot matches current code commit. Now, results reflect airquality dataset previously analyzed. targets date.","code":"tar_git_checkout() tar_read(result) tar_outdated()"},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"merges","dir":"Articles","previous_headings":"","what":"Merges","title":"Tutorial: Git data backend","text":"common merge code branches one another. happens, new merge commit created code repository, data repository remains unchanged. fact, change code repository now new commit data snapshot yet. wish, simply create new data snapshot tar_git_snapshot(). code commit immediately prior --date data snapshot , new snapshot merge commit cost little storage runtime.","code":""},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"custom-data-files","dir":"Articles","previous_headings":"","what":"Custom data files","title":"Tutorial: Git data backend","text":"files inside targets data store tracked gittargets data snapshot. pipeline requires custom external files, may put folder called _targets/user/. way, gittargets automatically put data version control next snapshot.","code":""},{"path":"https://docs.ropensci.org/gittargets/articles/git.html","id":"performance","dir":"Articles","previous_headings":"","what":"Performance","title":"Tutorial: Git data backend","text":"targets pipeline generates large data files, consider installing Git LFS. install Git LFS, just work project right box tar_git_init() writes following _targets/.gitattributes: addition, every data snapshot tar_git_snapshot() creates new Git branch. thousands commits thus thousands branches, performance may suffer unless ensure pack_refs TRUE function call (default).6(https://git-scm.com/docs/git-pack-refs) command line working directory inside _targets/.]","code":"objects filter=lfs diff=lfs merge=lfs -text"},{"path":"https://docs.ropensci.org/gittargets/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Michael Landau. Author, maintainer. Saras Windecker. Reviewer. David Neuzerling. Reviewer. Eli Lilly Company. Copyright holder.","code":""},{"path":"https://docs.ropensci.org/gittargets/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"William Michael Landau (2021). gittargets: Version Control targets Package. https://docs.ropensci.org/gittargets/, https://github.com/ropensci/gittargets.","code":"@Manual{,   title = {gittargets: Version Control for the Targets Package},   author = {William Michael Landau},   note = {https://docs.ropensci.org/gittargets/, https://github.com/ropensci/gittargets},   year = {2021}, }"},{"path":"https://docs.ropensci.org/gittargets/index.html","id":"gittargets-","dir":"","previous_headings":"","what":"Data Version Control for the Targets Package","title":"Data Version Control for the Targets Package","text":"computationally demanding data analysis pipelines, targets R package maintains --date set results skipping tasks need rerun. process increases speed increases trust final end product. However, also overwrites old output new output, past results disappear default. preserve historical output, gittargets package captures version-controlled snapshots data store, snapshot links underlying commit source code. way, user rolls back code previous branch commit, gittargets can recover data contemporaneous commit targets remain date.","code":""},{"path":"https://docs.ropensci.org/gittargets/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Data Version Control for the Targets Package","text":"Familiarity R programming language, covered R Data Science. Data science workflow management best practices. Git, covered Happy Git GitHub useR. targets, resources documentation website. Familiarity targets data store.","code":""},{"path":"https://docs.ropensci.org/gittargets/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Version Control for the Targets Package","text":"package available install following sources. also need command line Git, available https://git-scm.com/downloads.1 Please make sure Git reachable system path environment variables. control Git executable gittargets uses, may set TAR_GIT environment variable usethis::edit_r_environ() Sys.setenv(). also need configure user name user email global level using instructions https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup (gert::git_config_global_set()). Run tar_git_ok() check installation configuration. also backend-specific installation requirements recommendations package vignettes.","code":"tar_git_ok() #> ✓ Git binary: /path/to/git #> ✓ Git config global user name: your_user_name #> ✓ Git config global user email: your_email@example.com #> [1] TRUE"},{"path":"https://docs.ropensci.org/gittargets/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Data Version Control for the Targets Package","text":"Consider example pipeline source code _targets.R output data store. Suppose run pipeline confirm targets date. good practice track source code version control repository can revert previous commits branches. However, data store usually large keep repository code, typically lives cloud platform like GitHub space bandwidth pricey. check old commit branch, revert code, data. words, targets sync date.","code":"# _targets.R library(targets) list(   tar_target(data, airquality),   tar_target(model, lm(Ozone ~ Wind, data = data)) # Regress on wind speed. ) tar_make() #> • start target data #> • built target data #> • start target model #> • built target model #> • end pipeline tar_outdated() #> character(0) gert::git_branch_checkout(branch = \"other-model\") # _targets.R library(targets) list(   tar_target(data, airquality),   tar_target(model, lm(Ozone ~ Temp, data = data)) # Regress on temperature. ) tar_outdated() #> [1] \"model\""},{"path":"https://docs.ropensci.org/gittargets/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Data Version Control for the Targets Package","text":"gittargets, can keep targets date even check code different commits branches. specific steps depend data backend choose, supported backend package vignette walkthrough. example, important steps Git data backend follows. Create source code run pipeline least data store exists. tar_git_init(): initialize Git/Git LFS repository data store. Bring pipeline date (e.g. tar_make()) commit changes source code. tar_git_snapshot(): create data snapshot current code commit. Develop pipeline. Creating new code commits code branches early often, create data snapshots key strategic milestones. tar_git_checkout(): revert data appropriate prior snapshot.","code":""},{"path":"https://docs.ropensci.org/gittargets/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Data Version Control for the Targets Package","text":"targets generates large amount data _targets/objects/, data snapshots checkouts may take long time. work around performance limitations, may wish snapshot data important milestones project. Please refer package vignettes specific recommendations optimizing performance.","code":""},{"path":"https://docs.ropensci.org/gittargets/index.html","id":"future-directions","dir":"","previous_headings":"","what":"Future directions","title":"Data Version Control for the Targets Package","text":"first data versioning system gittargets uses Git, designed source code may scale enormous amounts compressed data. Future releases gittargets may explore alternative data backends powerful Git LFS.","code":""},{"path":"https://docs.ropensci.org/gittargets/index.html","id":"alternatives","dir":"","previous_headings":"","what":"Alternatives","title":"Data Version Control for the Targets Package","text":"Newer versions targets package (>= 0.9.0) support continuous data versioning cloud storage, e.g. Amazon Web Services S3 buckets versioning enabled. approach, targets tracks version ID cloud-backed target. way, metadata file reverts prior version, pipeline automatically uses prior versions targets date time metadata written. approach two distinct advantages gittargets: Cloud storage reduces burden local storage large data pipelines. Target data uploaded tracked continuously, means user need proactively take data snapshots. However, users access cloud services like AWS, everyone able willing pay monetary costs cloud storage every single version every single target, uploads downloads cloud may bottleneck pipelines. gittargets fills niche data versioning system Entirely local, Entirely opt-: users pick choose register data snapshots, consumes less storage continuous snapshots continuous cloud uploads versioned S3 bucket.","code":""},{"path":"https://docs.ropensci.org/gittargets/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Data Version Control for the Targets Package","text":"Please note gittargets project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/gittargets/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Data Version Control for the Targets Package","text":"","code":"citation(\"gittargets\") #>  #> To cite gittargets in publications use: #>  #>   William Michael Landau (2021). gittargets: Version Control for the #>   targets Package. https://docs.ropensci.org/gittargets/, #>   https://github.com/ropensci/gittargets. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {gittargets: Version Control for the Targets Package}, #>     author = {William Michael Landau}, #>     note = {https://docs.ropensci.org/gittargets/, https://github.com/ropensci/gittargets}, #>     year = {2021}, #>   }"},{"path":"https://docs.ropensci.org/gittargets/reference/gittargets-package.html","id":null,"dir":"Reference","previous_headings":"","what":"targets: Dynamic Function-Oriented Make-Like Declarative Pipelines for R — gittargets-package","title":"targets: Dynamic Function-Oriented Make-Like Declarative Pipelines for R — gittargets-package","text":"computationally demanding data analysis pipelines, targets R package maintains --date set results skipping tasks need rerun. process increases speed increases trust final end product. However, also overwrites old output new output, past results disappear default. preserve historical output, gittargets package captures version-controlled snapshots data store, snapshot links underlying commit source code. way, user rolls back code previous branch commit, gittargets can recover data contemporaneous commit targets remain date.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_checkout.html","id":null,"dir":"Reference","previous_headings":"","what":"Check out a snapshot of the data (Git) — tar_git_checkout","title":"Check out a snapshot of the data (Git) — tar_git_checkout","text":"Check snapshot data associated particular code commit (default: HEAD).","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_checkout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check out a snapshot of the data (Git) — tar_git_checkout","text":"","code":"tar_git_checkout(   ref = \"HEAD\",   code = getwd(),   store = targets::tar_config_get(\"store\"),   force = FALSE,   verbose = TRUE )"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_checkout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check out a snapshot of the data (Git) — tar_git_checkout","text":"ref Character length 1. SHA1 hash, branch name, reference code repository points code commit. (can also identify code commit supplying data branch form code=<SHA1>.) Defaults \"HEAD\", points currently checked code commit. desired code commit identified, tar_git_snapshot() checks latest corresponding data snapshot. may earlier data snapshots corresponding code commit, tar_git_snapshot() checks latest one. check earlier superseded data snapshot, need manually use command line Git data repository. tar_git_snapshot() find data snapshot desired code commit, throw error. list commits current code branch available data snapshots, see commit_code column output tar_git_log(). code Character length 1, directory path code repository, usually root targets project. store Character length 1, path data store pipeline. NULL, store setting left unchanged YAML configuration file (default: _targets.yaml). Usually, data store lives _targets. Set store custom directory specify path _targets/. path need exist pipeline begins, need end \"_targets\", must writeable. optimal performance, choose storage location fast read/write access. argument NULL, setting modified. Use tar_config_unset() delete setting. force ignore conflicts overwrite modified files verbose Logical length 1, whether print R console messages confirming snapshot created.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_checkout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check out a snapshot of the data (Git) — tar_git_checkout","text":"Nothing (invisibly).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_checkout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check out a snapshot of the data (Git) — tar_git_checkout","text":"","code":"if (Sys.getenv(\"TAR_EXAMPLES\") == \"true\" && tar_git_ok(verbose = FALSE)) { targets::tar_dir({ # Containing code does not modify the user's filespace. # Work on an initial branch. targets::tar_script(tar_target(data, \"old_data\")) targets::tar_make() targets::tar_read(data) # \"old_data\" gert::git_init() gert::git_add(\"_targets.R\") gert::git_commit(\"First commit\") gert::git_branch_create(\"old_branch\") tar_git_init() # Work on a new branch. tar_git_snapshot(status = FALSE, verbose = FALSE) targets::tar_script(tar_target(data, \"new_data\")) targets::tar_make() targets::tar_read(data) # \"new_data\" gert::git_branch_create(\"new_branch\") gert::git_add(\"_targets.R\") gert::git_commit(\"Second commit\") tar_git_snapshot(status = FALSE, verbose = FALSE) # Go back to the old branch. gert::git_branch_checkout(\"old_branch\") # The target is out of date because we only reverted the code. targets::tar_outdated() # But tar_git_checkout() lets us restore the old version of the data! tar_git_checkout() targets::tar_read(data) # \"old_data\" # Now, the target is up to date! And we did not even have to rerun it! targets::tar_outdated() }) }"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a data repository (Git). — tar_git_init","title":"Initialize a data repository (Git). — tar_git_init","text":"Initialize Git repository targets data store.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a data repository (Git). — tar_git_init","text":"","code":"tar_git_init(   store = targets::tar_config_get(\"store\"),   stash_gitignore = TRUE,   git_lfs = TRUE,   verbose = TRUE )"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a data repository (Git). — tar_git_init","text":"store Character length 1, path data store pipeline. NULL, store setting left unchanged YAML configuration file (default: _targets.yaml). Usually, data store lives _targets. Set store custom directory specify path _targets/. path need exist pipeline begins, need end \"_targets\", must writeable. optimal performance, choose storage location fast read/write access. argument NULL, setting modified. Use tar_config_unset() delete setting. stash_gitignore Logical length 1, whether temporarily stash .gitignore file data store. See \"Stashing .gitignore\" section details. git_lfs Logical, whether automatically opt Git LFS track large files _targets/objects efficiently. TRUE Git LFS installed, work automatically. FALSE, can always opt later running git lfs track objects inside data store. verbose Logical length 1, whether print messages R console.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a data repository (Git). — tar_git_init","text":"NULL (invisibly).","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a data repository (Git). — tar_git_init","text":"tar_git_init() also writes .gitattributes file store automatically track target output date git-lfs installed system.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_init.html","id":"stashing-gitignore","dir":"Reference","previous_headings":"","what":"Stashing .gitignore","title":"Initialize a data repository (Git). — tar_git_init","text":"targets package writes .gitignore file new data stores order prevent accidental commits code Git repository. Unfortunately, gittargets, automatic .gitignore file interferes proper data versioning. default, gittargets temporarily stashes hidden file called .gittargets_gitignore inside data store. R program crashes stash active, can simply move manually back .gitignore run tar_git_status_data() restore stash automatically .gitignore already exists.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a data repository (Git). — tar_git_init","text":"","code":"if (Sys.getenv(\"TAR_EXAMPLES\") == \"true\" && tar_git_ok(verbose = FALSE)) { targets::tar_dir({ # Containing code does not modify the user's file space. targets::tar_script(tar_target(data, 1)) targets::tar_make() tar_git_init() }) }"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Data snapshots of a code branch (Git) — tar_git_log","title":"Data snapshots of a code branch (Git) — tar_git_log","text":"Show data snapshots code branch.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data snapshots of a code branch (Git) — tar_git_log","text":"","code":"tar_git_log(   code = getwd(),   store = targets::tar_config_get(\"store\"),   branch = gert::git_branch(repo = code),   max = 100 )"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data snapshots of a code branch (Git) — tar_git_log","text":"code Character length 1, directory path code repository, usually root targets project. store Character length 1, path data store pipeline. NULL, store setting left unchanged YAML configuration file (default: _targets.yaml). Usually, data store lives _targets. Set store custom directory specify path _targets/. path need exist pipeline begins, need end \"_targets\", must writeable. optimal performance, choose storage location fast read/write access. argument NULL, setting modified. Use tar_config_unset() delete setting. branch Character length 1, name code repository branch query. Defaults currently checked-code branch. max Positive numeric length 1, maximum number code commits inspect given branch.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data snapshots of a code branch (Git) — tar_git_log","text":"data frame information data snapshots code commits.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data snapshots of a code branch (Git) — tar_git_log","text":"design, tar_git_log() queries single code branch time. allows tar_git_log() report detailed information snapshots given code branch. query data snapshots branches, simply run gert::git_branch_list(local = TRUE, repo = \"_targets\"). valid snapshots show \"code=<SHA1>\" name column, <SHA1> Git commit hash code commit corresponding data snapshot.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data snapshots of a code branch (Git) — tar_git_log","text":"","code":"if (Sys.getenv(\"TAR_EXAMPLES\") == \"true\" && tar_git_ok(verbose = FALSE)) { targets::tar_dir({ # Containing code does not modify the user's filespace. targets::tar_script(tar_target(data, 1)) targets::tar_make() gert::git_init() gert::git_add(\"_targets.R\") gert::git_commit(\"First commit\") tar_git_init() tar_git_snapshot(status = FALSE, verbose = FALSE) tar_git_log() }) }"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_ok.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Git — tar_git_ok","title":"Check Git — tar_git_ok","text":"Check Git installed user.name user.email configured globally.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_ok.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Git — tar_git_ok","text":"","code":"tar_git_ok(verbose = TRUE)"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_ok.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Git — tar_git_ok","text":"verbose Whether print messages console.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_ok.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Git — tar_git_ok","text":"Logical length 1, whether Git installed configured correctly.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_ok.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Git — tar_git_ok","text":"can install Git https://git-scm.com/downloads/ configure identity using instructions https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup. may find convenient run gert::git_config_global() name equal user.name user.email.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_ok.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Git — tar_git_ok","text":"","code":"tar_git_ok() #> ✔ Git binary: /usr/bin/git #> ✖ Error getting Git global user name and email: #> ✖ ! System command 'git' failed #> [1] FALSE"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_snapshot.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot the data repository (Git). — tar_git_snapshot","title":"Snapshot the data repository (Git). — tar_git_snapshot","text":"Snapshot Git data repository targets project.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_snapshot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot the data repository (Git). — tar_git_snapshot","text":"","code":"tar_git_snapshot(   message = NULL,   ref = \"HEAD\",   code = getwd(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\"),   stash_gitignore = TRUE,   reporter = targets::tar_config_get(\"reporter_outdated\"),   envir = parent.frame(),   callr_function = callr::r,   callr_arguments = NULL,   status = interactive(),   force = FALSE,   pack_refs = TRUE,   verbose = TRUE )"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_snapshot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Snapshot the data repository (Git). — tar_git_snapshot","text":"message Optional Git commit message data snapshot. NULL, message Git commit message matching code commit. ref Character length 1, reference (branch name, Git SHA1 hash, etc.) code commit map new data snapshot. Defaults commit checked right now. code Character length 1, directory path code repository, usually root targets project. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path data store pipeline. NULL, store setting left unchanged YAML configuration file (default: _targets.yaml). Usually, data store lives _targets. Set store custom directory specify path _targets/. path need exist pipeline begins, need end \"_targets\", must writeable. optimal performance, choose storage location fast read/write access. argument NULL, setting modified. Use tar_config_unset() delete setting. stash_gitignore Logical length 1, whether temporarily stash .gitignore file data store. See \"Stashing .gitignore\" section details. reporter Character length 1, name reporter user. Controls messages printed targets checked. Choices: \"silent\": print nothing. \"forecast\": print running totals checked outdated targets found far. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function. status Logical length 1, whether print project status tar_git_status() ask whether snapshot created. force Logical length 1. Force checkout data branch existing data snapshot current code commit? pack_refs Logical length 1, whether run git pack-refs --data store taking snapshot. Packing references improves efficiency number snapshots large. Learn https://git-scm.com/docs/git-pack-refs. verbose Logical length 1, whether print R console messages confirming snapshot created.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_snapshot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Snapshot the data repository (Git). — tar_git_snapshot","text":"Git-backed gittargets data snapshot special kind Git commit. Every data commit part branch specific current code commit. way, switch branches commits code, tar_git_checkout() checks latest data snapshot matches code workspace. way, targets can stay date even transition among multiple branches.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_snapshot.html","id":"stashing-gitignore","dir":"Reference","previous_headings":"","what":"Stashing .gitignore","title":"Snapshot the data repository (Git). — tar_git_snapshot","text":"targets package writes .gitignore file new data stores order prevent accidental commits code Git repository. Unfortunately, gittargets, automatic .gitignore file interferes proper data versioning. default, gittargets temporarily stashes hidden file called .gittargets_gitignore inside data store. R program crashes stash active, can simply move manually back .gitignore run tar_git_status_data() restore stash automatically .gitignore already exists.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_snapshot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Snapshot the data repository (Git). — tar_git_snapshot","text":"","code":"if (Sys.getenv(\"TAR_EXAMPLES\") == \"true\" && tar_git_ok(verbose = FALSE)) { targets::tar_dir({ # Containing code does not modify the user's filespace. targets::tar_script(tar_target(data, 1)) targets::tar_make() gert::git_init() gert::git_add(\"_targets.R\") gert::git_commit(\"First commit\") tar_git_init() tar_git_snapshot(status = FALSE) }) }"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_snapshot_menu.html","id":null,"dir":"Reference","previous_headings":"","what":"Data snapshot menu (Git) — tar_git_snapshot_menu","title":"Data snapshot menu (Git) — tar_git_snapshot_menu","text":"Check project status show interactive menu tar_git_snapshot().","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_snapshot_menu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data snapshot menu (Git) — tar_git_snapshot_menu","text":"","code":"tar_git_snapshot_menu(   commit,   message,   code,   script,   store,   stash_gitignore,   reporter,   envir,   callr_function,   callr_arguments )"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_snapshot_menu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data snapshot menu (Git) — tar_git_snapshot_menu","text":"commit Character length 1, Git SHA1 hash code commit correspond data snapshot (created). message Optional Git commit message data snapshot. NULL, message Git commit message matching code commit. code Character length 1, directory path code repository, usually root targets project. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path data store pipeline. NULL, store setting left unchanged YAML configuration file (default: _targets.yaml). Usually, data store lives _targets. Set store custom directory specify path _targets/. path need exist pipeline begins, need end \"_targets\", must writeable. optimal performance, choose storage location fast read/write access. argument NULL, setting modified. Use tar_config_unset() delete setting. stash_gitignore Logical length 1, whether temporarily stash .gitignore file data store. See \"Stashing .gitignore\" section details. reporter Character length 1, name reporter user. Controls messages printed targets checked. Choices: \"silent\": print nothing. \"forecast\": print running totals checked outdated targets found far. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_snapshot_menu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data snapshot menu (Git) — tar_git_snapshot_menu","text":"Integer length 1: 2L user agrees snapshot, 1L user declines.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_snapshot_menu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data snapshot menu (Git) — tar_git_snapshot_menu","text":"","code":"# See the examples of tar_git_snapshot()."},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Status of the project (Git) — tar_git_status","title":"Status of the project (Git) — tar_git_status","text":"Print status code repository, data repository, targets.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status of the project (Git) — tar_git_status","text":"","code":"tar_git_status(   code = getwd(),   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\"),   stash_gitignore = TRUE,   reporter = targets::tar_config_get(\"reporter_outdated\"),   envir = parent.frame(),   callr_function = callr::r,   callr_arguments = NULL )"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status of the project (Git) — tar_git_status","text":"code Character length 1, directory path code repository, usually root targets project. script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path data store pipeline. NULL, store setting left unchanged YAML configuration file (default: _targets.yaml). Usually, data store lives _targets. Set store custom directory specify path _targets/. path need exist pipeline begins, need end \"_targets\", must writeable. optimal performance, choose storage location fast read/write access. argument NULL, setting modified. Use tar_config_unset() delete setting. stash_gitignore Logical length 1, whether temporarily stash .gitignore file data store. See \"Stashing .gitignore\" section details. reporter Character length 1, name reporter user. Controls messages printed targets checked. Choices: \"silent\": print nothing. \"forecast\": print running totals checked outdated targets found far. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status of the project (Git) — tar_git_status","text":"NULL (invisibly). Status information printed R console.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status.html","id":"stashing-gitignore","dir":"Reference","previous_headings":"","what":"Stashing .gitignore","title":"Status of the project (Git) — tar_git_status","text":"targets package writes .gitignore file new data stores order prevent accidental commits code Git repository. Unfortunately, gittargets, automatic .gitignore file interferes proper data versioning. default, gittargets temporarily stashes hidden file called .gittargets_gitignore inside data store. R program crashes stash active, can simply move manually back .gitignore run tar_git_status_data() restore stash automatically .gitignore already exists.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Status of the project (Git) — tar_git_status","text":"","code":"if (Sys.getenv(\"TAR_EXAMPLES\") == \"true\" && tar_git_ok(verbose = FALSE)) { targets::tar_dir({ # Containing code does not modify the user's files pace. targets::tar_script(tar_target(data, 1)) targets::tar_make() list.files(\"_targets\", all.files = TRUE) gert::git_init() tar_git_init() tar_git_status() }) }"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Status of the code repository (Git) — tar_git_status_code","title":"Status of the code repository (Git) — tar_git_status_code","text":"Show Git status code repository.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status of the code repository (Git) — tar_git_status_code","text":"","code":"tar_git_status_code(code = getwd())"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status of the code repository (Git) — tar_git_status_code","text":"code Character length 1, directory path code repository, usually root targets project.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status of the code repository (Git) — tar_git_status_code","text":"code repository exists, return value data frame produced gert::git_status(repo = code). code Git repository, return value NULL.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Status of the code repository (Git) — tar_git_status_code","text":"","code":"if (Sys.getenv(\"TAR_EXAMPLES\") == \"true\" && tar_git_ok(verbose = FALSE)) { targets::tar_dir({ # Containing code does not modify the user's file space. targets::tar_script(tar_target(data, 1)) targets::tar_make() list.files(\"_targets\", all.files = TRUE) gert::git_init() tar_git_init() tar_git_status_code() }) }"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Status of the data repository (Git) — tar_git_status_data","title":"Status of the data repository (Git) — tar_git_status_data","text":"Show Git status data repository.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status of the data repository (Git) — tar_git_status_data","text":"","code":"tar_git_status_data(   store = targets::tar_config_get(\"store\"),   stash_gitignore = TRUE )"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status of the data repository (Git) — tar_git_status_data","text":"store Character length 1, path data store pipeline. NULL, store setting left unchanged YAML configuration file (default: _targets.yaml). Usually, data store lives _targets. Set store custom directory specify path _targets/. path need exist pipeline begins, need end \"_targets\", must writeable. optimal performance, choose storage location fast read/write access. argument NULL, setting modified. Use tar_config_unset() delete setting. stash_gitignore Logical length 1, whether temporarily stash .gitignore file data store. See \"Stashing .gitignore\" section details.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status of the data repository (Git) — tar_git_status_data","text":"data repository exists, return value data frame produced gert::git_status(repo = store). data store Git repository, return value NULL.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_data.html","id":"stashing-gitignore","dir":"Reference","previous_headings":"","what":"Stashing .gitignore","title":"Status of the data repository (Git) — tar_git_status_data","text":"targets package writes .gitignore file new data stores order prevent accidental commits code Git repository. Unfortunately, gittargets, automatic .gitignore file interferes proper data versioning. default, gittargets temporarily stashes hidden file called .gittargets_gitignore inside data store. R program crashes stash active, can simply move manually back .gitignore run tar_git_status_data() restore stash automatically .gitignore already exists.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Status of the data repository (Git) — tar_git_status_data","text":"","code":"if (Sys.getenv(\"TAR_EXAMPLES\") == \"true\" && tar_git_ok(verbose = FALSE)) { targets::tar_dir({ # Containing code does not modify the user's file space. targets::tar_script(tar_target(data, 1)) targets::tar_make() list.files(\"_targets\", all.files = TRUE) gert::git_init() tar_git_init() tar_git_status_data() }) }"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Status of the targets (Git) — tar_git_status_targets","title":"Status of the targets (Git) — tar_git_status_targets","text":"Show targets outdated.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status of the targets (Git) — tar_git_status_targets","text":"","code":"tar_git_status_targets(   script = targets::tar_config_get(\"script\"),   store = targets::tar_config_get(\"store\"),   reporter = targets::tar_config_get(\"reporter_outdated\"),   envir = parent.frame(),   callr_function = callr::r,   callr_arguments = NULL )"},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status of the targets (Git) — tar_git_status_targets","text":"script Character length 1, path target script file. Defaults tar_config_get(\"script\"), turn defaults _targets.R. set argument, value tar_config_get(\"script\") temporarily changed current function call. See tar_script(), tar_config_get(), tar_config_set() details target script file set persistently project. store Character length 1, path targets data store. Defaults tar_config_get(\"store\"), turn defaults _targets/. set argument, value tar_config_get(\"store\") temporarily changed current function call. See tar_config_get() tar_config_set() details set data store path persistently project. reporter Character length 1, name reporter user. Controls messages printed targets checked. Choices: \"silent\": print nothing. \"forecast\": print running totals checked outdated targets found far. envir environment, run target R script (default: _targets.R) callr_function NULL. Ignored callr_function anything NULL. callr_function NULL debugging testing purposes, serious runs pipeline, etc. envir argument tar_make() related functions always overrides current value tar_option_get(\"envir\") current R session just running target script file, whenever need set alternative envir, always set tar_option_set() within target script file. words, call tar_option_set(envir = envir1) interactive session tar_make(envir = envir2, callr_function = NULL), envir2 used. callr_function function callr start fresh clean R process work. Set NULL run current session instead external process (restart R session just order clear debris global environment). callr_function needs NULL interactive debugging, e.g. tar_option_set(debug = \"your_target\"). However, callr_function NULL serious reproducible work. callr_arguments list arguments callr_function.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status of the targets (Git) — tar_git_status_targets","text":"tibble names outdated targets.","code":""},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_targets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Status of the targets (Git) — tar_git_status_targets","text":"function prettier output targets::tar_outdated(), mainly serves tar_git_status().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/gittargets/reference/tar_git_status_targets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Status of the targets (Git) — tar_git_status_targets","text":"","code":"targets::tar_dir({ # Containing code does not modify the user's file space. targets::tar_script(tar_target(data, 1)) targets::tar_make() list.files(\"_targets\", all.files = TRUE) tar_git_status_targets() }) #> ▶ dispatched target data #> ● completed target data [0.001 seconds] #> ▶ ended pipeline [0.065 seconds] #>  #> # A tibble: 0 × 1 #> # ℹ 1 variable: outdated <chr>"},{"path":[]},{"path":"https://docs.ropensci.org/gittargets/news/index.html","id":"gittargets-007","dir":"Changelog","previous_headings":"","what":"gittargets 0.0.7","title":"gittargets 0.0.7","text":"CRAN release: 2023-12-04 Migrate tests targets >= 1.3.2.9004 progress statuses (“completed” instead “built”, “dispatched” instead “started”).","code":""},{"path":"https://docs.ropensci.org/gittargets/news/index.html","id":"gittargets-006","dir":"Changelog","previous_headings":"","what":"gittargets 0.0.6","title":"gittargets 0.0.6","text":"CRAN release: 2023-02-09 Import callr::r().","code":""},{"path":"https://docs.ropensci.org/gittargets/news/index.html","id":"gittargets-005","dir":"Changelog","previous_headings":"","what":"gittargets 0.0.5","title":"gittargets 0.0.5","text":"CRAN release: 2022-09-06 Use processx::run() instead system2() tar_git_ok() set HOME USERPROFILE Windows (#12, @psychelzh). Handle errors invoking Git get global user name email.","code":""},{"path":"https://docs.ropensci.org/gittargets/news/index.html","id":"gittargets-004","dir":"Changelog","previous_headings":"","what":"gittargets 0.0.4","title":"gittargets 0.0.4","text":"CRAN release: 2022-08-05 Compatibility {targets} 0.13.0.","code":""},{"path":"https://docs.ropensci.org/gittargets/news/index.html","id":"gittargets-003","dir":"Changelog","previous_headings":"","what":"gittargets 0.0.3","title":"gittargets 0.0.3","text":"CRAN release: 2022-02-12 Fix example CRAN.","code":""},{"path":"https://docs.ropensci.org/gittargets/news/index.html","id":"gittargets-002","dir":"Changelog","previous_headings":"","what":"gittargets 0.0.2","title":"gittargets 0.0.2","text":"Hard reset checkout tar_git_checkout() order recover potentially deleted files (#11).","code":""},{"path":"https://docs.ropensci.org/gittargets/news/index.html","id":"gittargets-001","dir":"Changelog","previous_headings":"","what":"gittargets 0.0.1","title":"gittargets 0.0.1","text":"CRAN release: 2022-01-13 Join rOpenSci. Rewrite README motivate use case. Remove workflow diagram. Simplify snapshot model diagram. Fix documentation ref argument tar_git_checkout(). Add section git.Rmd vignette code merges. Allow command line Git tests run locally Windows. First version.","code":""}]
